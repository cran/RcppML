// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getRcppMLthreads
int getRcppMLthreads();
RcppExport SEXP _RcppML_getRcppMLthreads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getRcppMLthreads());
    return rcpp_result_gen;
END_RCPP
}
// setRcppMLthreads
void setRcppMLthreads(int threads);
RcppExport SEXP _RcppML_setRcppMLthreads(SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    setRcppMLthreads(threads);
    return R_NilValue;
END_RCPP
}
// project
Eigen::MatrixXd project(const Rcpp::S4& A, const Rcpp::Nullable<Rcpp::NumericMatrix> w, const Rcpp::Nullable<Rcpp::NumericMatrix> h, const bool nonneg, const double L1, const bool mask_zeros);
RcppExport SEXP _RcppML_project(SEXP ASEXP, SEXP wSEXP, SEXP hSEXP, SEXP nonnegSEXP, SEXP L1SEXP, SEXP mask_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix> >::type h(hSEXP);
    Rcpp::traits::input_parameter< const bool >::type nonneg(nonnegSEXP);
    Rcpp::traits::input_parameter< const double >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< const bool >::type mask_zeros(mask_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(project(A, w, h, nonneg, L1, mask_zeros));
    return rcpp_result_gen;
END_RCPP
}
// mse
double mse(const Rcpp::S4& A, Eigen::MatrixXd& w, Eigen::VectorXd& d, Eigen::MatrixXd& h, const bool mask_zeros);
RcppExport SEXP _RcppML_mse(SEXP ASEXP, SEXP wSEXP, SEXP dSEXP, SEXP hSEXP, SEXP mask_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type w(wSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const bool >::type mask_zeros(mask_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(mse(A, w, d, h, mask_zeros));
    return rcpp_result_gen;
END_RCPP
}
// bipartition
Rcpp::List bipartition(const Rcpp::S4& A, const double tol, const unsigned int maxit, const bool nonneg, Rcpp::Nullable<Rcpp::IntegerVector> samples, Rcpp::Nullable<Rcpp::IntegerVector> seed, const bool verbose, const bool calc_dist, const bool diag);
RcppExport SEXP _RcppML_bipartition(SEXP ASEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP nonnegSEXP, SEXP samplesSEXP, SEXP seedSEXP, SEXP verboseSEXP, SEXP calc_distSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const bool >::type nonneg(nonnegSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type calc_dist(calc_distSEXP);
    Rcpp::traits::input_parameter< const bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(bipartition(A, tol, maxit, nonneg, samples, seed, verbose, calc_dist, diag));
    return rcpp_result_gen;
END_RCPP
}
// dclust
Rcpp::List dclust(const Rcpp::S4& A, const unsigned int min_samples, const double min_dist, const bool verbose, const double tol, const unsigned int maxit, const bool nonneg, Rcpp::Nullable<Rcpp::IntegerVector> seed);
RcppExport SEXP _RcppML_dclust(SEXP ASEXP, SEXP min_samplesSEXP, SEXP min_distSEXP, SEXP verboseSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP nonnegSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type min_samples(min_samplesSEXP);
    Rcpp::traits::input_parameter< const double >::type min_dist(min_distSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const bool >::type nonneg(nonnegSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(dclust(A, min_samples, min_dist, verbose, tol, maxit, nonneg, seed));
    return rcpp_result_gen;
END_RCPP
}
// nmf
Rcpp::List nmf(const Rcpp::S4& A, const unsigned int k, const double tol, const unsigned int maxit, const bool verbose, const bool nonneg, const Rcpp::NumericVector L1, Rcpp::Nullable<Rcpp::IntegerVector> seed, const bool update_in_place, const bool diag, const bool mask_zeros);
RcppExport SEXP _RcppML_nmf(SEXP ASEXP, SEXP kSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP, SEXP nonnegSEXP, SEXP L1SEXP, SEXP seedSEXP, SEXP update_in_placeSEXP, SEXP diagSEXP, SEXP mask_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type nonneg(nonnegSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const bool >::type update_in_place(update_in_placeSEXP);
    Rcpp::traits::input_parameter< const bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< const bool >::type mask_zeros(mask_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(nmf(A, k, tol, maxit, verbose, nonneg, L1, seed, update_in_place, diag, mask_zeros));
    return rcpp_result_gen;
END_RCPP
}
// nnls
Eigen::MatrixXd nnls(const Eigen::MatrixXd& a, Eigen::MatrixXd b, unsigned int cd_maxit, const double cd_tol, const bool fast_nnls, const double L1);
RcppExport SEXP _RcppML_nnls(SEXP aSEXP, SEXP bSEXP, SEXP cd_maxitSEXP, SEXP cd_tolSEXP, SEXP fast_nnlsSEXP, SEXP L1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type b(bSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cd_maxit(cd_maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type cd_tol(cd_tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type fast_nnls(fast_nnlsSEXP);
    Rcpp::traits::input_parameter< const double >::type L1(L1SEXP);
    rcpp_result_gen = Rcpp::wrap(nnls(a, b, cd_maxit, cd_tol, fast_nnls, L1));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppML_getRcppMLthreads", (DL_FUNC) &_RcppML_getRcppMLthreads, 0},
    {"_RcppML_setRcppMLthreads", (DL_FUNC) &_RcppML_setRcppMLthreads, 1},
    {"_RcppML_project", (DL_FUNC) &_RcppML_project, 6},
    {"_RcppML_mse", (DL_FUNC) &_RcppML_mse, 5},
    {"_RcppML_bipartition", (DL_FUNC) &_RcppML_bipartition, 9},
    {"_RcppML_dclust", (DL_FUNC) &_RcppML_dclust, 8},
    {"_RcppML_nmf", (DL_FUNC) &_RcppML_nmf, 11},
    {"_RcppML_nnls", (DL_FUNC) &_RcppML_nnls, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppML(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
